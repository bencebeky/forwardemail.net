'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var randombytes = _interopDefault(require('randombytes'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

// Copyright (c) 2019 Siddharth Doshi
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT
var numbers = '0123456789';
var charsLower = 'abcdefghijklmnopqrstuvwxyz';
var charsUpper =
/*#__PURE__*/
charsLower.toUpperCase();
var hexChars = 'ABCDEF';
var symbols = '!@#$%^&*()<>?/[]{},.:;';
var charsets = {
  alphanumeric: charsLower + charsUpper + numbers,
  alphabetic: charsLower + charsUpper,
  loweralpha: charsLower,
  upperalpha: charsUpper,
  numeric: numbers,
  hex: hexChars + numbers,
  symbols: symbols
};

var MAX_CHARSET_SIZE = 0x10000;
var defaultOptions = {
  length: 32,
  characters: charsets.alphanumeric
};
function randomstring(options) {
  if (options === void 0) {
    options = 32;
  }

  if (typeof options === 'number') {
    options = {
      length: options
    };
  }

  var result = [];

  var opts = _extends({}, defaultOptions, {}, options);

  if (opts.characters.length >= MAX_CHARSET_SIZE) {
    throw new Error("Character set size should not increase " + MAX_CHARSET_SIZE);
  } // Let c be `characters.length`.
  // The closest number to MAX_CHARSET_SIZE that is divisible by `c`.
  // We take the number that is a multiple of `c` so that each character from
  // the set has an equal chance of being choosen.


  var max = MAX_CHARSET_SIZE - MAX_CHARSET_SIZE % opts.characters.length; // Most of the time, the randomstring would be built in first inner loop.
  // But on cases when multiple invalid selectors are found and we can't build
  // the compelete string in first loop, we continue looping.

  while (result.length < opts.length) {
    // Ensure that the size of entropy is even because we are using 2 bytes
    // for getting selectors. We use 16bit selectors so that it would allow
    // generating random strings from bigger character sets.
    // The size of entropy is also set to be a little longer than the requested
    // length so that we have higher chances of generating the compelete string
    // in one loop.
    var entropy = randombytes(Math.ceil(1.1 * opts.length) * 2);

    for (var i = 0; i < entropy.length && result.length < opts.length; i += 2) {
      var selector = entropy.readUInt16BE(i);

      if (selector > max) {
        continue;
      }

      result.push(opts.characters[selector % opts.characters.length]);
    }
  }

  return result.join('');
}

exports.charsets = charsets;
exports.default = randomstring;
exports.randomstring = randomstring;
//# sourceMappingURL=random-string.cjs.development.js.map
