{"version":3,"file":"random-string.cjs.production.min.js","sources":["../src/charset.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) 2019 Siddharth Doshi\n//\n// This software is released under the MIT License.\n// https://opensource.org/licenses/MIT\n\ntype Charset =\n  | 'alphanumeric'\n  | 'alphabetic'\n  | 'loweralpha'\n  | 'upperalpha'\n  | 'numeric'\n  | 'hex'\n  | 'symbols';\n\ntype Charsets = {\n  [key in Charset]: string;\n};\n\nconst numbers = '0123456789';\nconst charsLower = 'abcdefghijklmnopqrstuvwxyz';\nconst charsUpper = charsLower.toUpperCase();\nconst hexChars = 'ABCDEF';\nconst symbols = '!@#$%^&*()<>?/[]{},.:;';\n\nexport const charsets: Charsets = {\n  alphanumeric: charsLower + charsUpper + numbers,\n  alphabetic: charsLower + charsUpper,\n  loweralpha: charsLower,\n  upperalpha: charsUpper,\n  numeric: numbers,\n  hex: hexChars + numbers,\n  symbols,\n};\n","// Copyright (c) 2019 Siddharth Doshi\n//\n// This software is released under the MIT License.\n// https://opensource.org/licenses/MIT\n\nimport randombytes from 'randombytes';\n\nimport { charsets } from './charset';\nexport { charsets } from './charset';\n\ninterface OptionsObject {\n  length?: number;\n  characters?: string;\n}\n\ntype Options = OptionsObject | number;\n\nconst MAX_CHARSET_SIZE = 0x10000;\n\nconst defaultOptions = {\n  length: 32,\n  characters: charsets.alphanumeric,\n};\n\nexport function randomstring(options?: number): string;\nexport function randomstring(options?: Options): string;\nexport function randomstring(options: Options | number = 32): string {\n  if (typeof options === 'number') {\n    options = {\n      length: options,\n    };\n  }\n\n  const result: string[] = [];\n  const opts = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  if (opts.characters.length >= MAX_CHARSET_SIZE) {\n    throw new Error(\n      `Character set size should not increase ${MAX_CHARSET_SIZE}`\n    );\n  }\n\n  // Let c be `characters.length`.\n  // The closest number to MAX_CHARSET_SIZE that is divisible by `c`.\n  // We take the number that is a multiple of `c` so that each character from\n  // the set has an equal chance of being choosen.\n  const max = MAX_CHARSET_SIZE - (MAX_CHARSET_SIZE % opts.characters.length);\n\n  // Most of the time, the randomstring would be built in first inner loop.\n  // But on cases when multiple invalid selectors are found and we can't build\n  // the compelete string in first loop, we continue looping.\n  while (result.length < opts.length) {\n    // Ensure that the size of entropy is even because we are using 2 bytes\n    // for getting selectors. We use 16bit selectors so that it would allow\n    // generating random strings from bigger character sets.\n    // The size of entropy is also set to be a little longer than the requested\n    // length so that we have higher chances of generating the compelete string\n    // in one loop.\n    const entropy = randombytes(Math.ceil(1.1 * opts.length) * 2);\n\n    for (let i = 0; i < entropy.length && result.length < opts.length; i += 2) {\n      const selector = entropy.readUInt16BE(i);\n      if (selector > max) {\n        continue;\n      }\n      result.push(opts.characters[selector % opts.characters.length]);\n    }\n  }\n\n  return result.join('');\n}\n\nexport default randomstring;\n"],"names":["charsLower","charsUpper","toUpperCase","charsets","alphanumeric","alphabetic","loweralpha","upperalpha","numeric","hex","hexChars","symbols","MAX_CHARSET_SIZE","defaultOptions","length","characters","randomstring","options","result","opts","Error","max","entropy","randombytes","Math","ceil","i","selector","readUInt16BE","push","join"],"mappings":"8SAkBA,IACMA,EAAa,6BACbC,EAAaD,EAAWE,cAIjBC,EAAqB,CAChCC,aAAcJ,EAAaC,EAPb,aAQdI,WAAYL,EAAaC,EACzBK,WAAYN,EACZO,WAAYN,EACZO,QAXc,aAYdC,IAAKC,mBACLC,QATc,0BCLVC,EAAmB,MAEnBC,EAAiB,CACrBC,OAAQ,GACRC,WAAYZ,EAASC,uBAKPY,EAAaC,YAAAA,IAAAA,EAA4B,IAChC,iBAAZA,IACTA,EAAU,CACRH,OAAQG,QAINC,EAAmB,GACnBC,OACDN,KACAI,MAGDE,EAAKJ,WAAWD,QAAUF,QACtB,IAAIQ,gDACkCR,WAQxCS,EAAMT,EAAoBA,EAAmBO,EAAKJ,WAAWD,OAK5DI,EAAOJ,OAASK,EAAKL,gBAOpBQ,EAAUC,EAA2C,EAA/BC,KAAKC,KAAK,IAAMN,EAAKL,SAExCY,EAAI,EAAGA,EAAIJ,EAAQR,QAAUI,EAAOJ,OAASK,EAAKL,OAAQY,GAAK,EAAG,KACnEC,EAAWL,EAAQM,aAAaF,GAClCC,EAAWN,GAGfH,EAAOW,KAAKV,EAAKJ,WAAWY,EAAWR,EAAKJ,WAAWD,gBAIpDI,EAAOY,KAAK"}