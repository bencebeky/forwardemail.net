"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const Swal = require('sweetalert2');

const isSANB = require('is-string-and-not-blank'); // Allow users to specify:
// `data-toggle="confirm-prompt"` or `.confirm-prompt` class
// `data-html="Please confirm if you wish to continue"` html/text of message
// `data-title="Are you sure?"` title of swal message


const confirmPrompt =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (ev) {
    // Get the form or button
    const $el = $(ev.currentTarget);
    let title = $el.data('confirm-prompt-title');
    if (!isSANB(title)) title = window._confirmPromptTitle || 'Are you sure?';
    let html = $el.data('confirm-prompt-html');
    if (!isSANB(html)) html = window._confirmPromptHTML || 'Please confirm if you wish to continue.'; // Check if we've already confirmed it

    const confirmed = $el.data('confirmed');

    if (!confirmed) {
      ev.preventDefault();
      const result = yield Swal.fire({
        title,
        html,
        type: 'question',
        showCancelButton: true
      });
      if (!result.value) return; // Set confirmed state to true

      $el.data('confirmed', true); // Trigger click again

      $el.trigger(ev.type); // Reset confirmation after click

      $el.data('confirmed', false);
    }
  });

  return function confirmPrompt(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = confirmPrompt;