"use strict";

var c = require('ansi-colors');

var clfDate = require('clf-date');

var ms = require('ms'); // https://github.com/cabinjs/request-received


var requestReceivedStartTime = Symbol.for('request-received.startTime');
var pinoHttpStartTime = Symbol.for('pino-http.startTime');

function getStartTime(req) {
  var startTime = new Date();
  if (req[requestReceivedStartTime] instanceof Date) startTime = req[requestReceivedStartTime];else if (typeof req[requestReceivedStartTime] === 'number') startTime = new Date(req[requestReceivedStartTime]);else if (req[pinoHttpStartTime]) startTime = new Date(req[pinoHttpStartTime]);else if (req._startTime instanceof Date) startTime = req._startTime;else if (typeof req._startTime === 'number') startTime = new Date(req._startTime);
  return startTime;
}

function apacheCommonLogFormat(options) {
  var req = options.req,
      res = options.res,
      ctx = options.ctx;
  var startTime = getStartTime(req);
  return "".concat(ctx ? ctx.ip : req.ip, " - ").concat(clfDate(startTime), " \"").concat(req.method, " ").concat(req.url, " HTTP/").concat(req.httpVersionMajor, ".").concat(req.httpVersionMinor, "\" ").concat(res.statusCode, " ").concat(res.getHeader('content-length') || '-');
}

function devFriendlyLogFormat(options) {
  var req = options.req,
      res = options.res,
      ctx = options.ctx;
  var statusColor = res.statusCode >= 500 ? 'red' : res.statusCode >= 400 ? 'yellow' : res.statusCode >= 300 ? 'cyan' : res.statusCode >= 200 ? 'green' : 'white';
  var responseTime = '-';
  var responseTimeHeader = res.getHeader('x-response-time');

  if (responseTimeHeader) {
    var milliseconds = ms(responseTimeHeader);
    var responseColor = milliseconds >= 1000 ? 'red' : milliseconds >= 500 ? 'magenta' : milliseconds >= 250 ? 'yellow' : milliseconds >= 100 ? 'cyan' : 'green';
    responseTime = c[responseColor]("".concat(milliseconds, " ms"));
  }

  return [ctx ? ctx.ip : req.ip, req.method, req.url, "HTTP/".concat(req.httpVersionMajor, ".").concat(req.httpVersionMinor), c[statusColor](res.statusCode), res.getHeader('content-length') || '-', '-', responseTime].join(' ');
} // https://stackoverflow.com/questions/9234699/understanding-apaches-access-log


module.exports = function (options) {
  // Apache Common Log Format
  // <https://httpd.apache.org/docs/current/logs.html#common>
  // :remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length]
  if (process.env.NODE_ENV === 'production') return apacheCommonLogFormat(options); // Dev-Friendly Log Format
  // :remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms

  return devFriendlyLogFormat(options);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXNzYWdlLmpzIl0sIm5hbWVzIjpbImMiLCJyZXF1aXJlIiwiY2xmRGF0ZSIsIm1zIiwicmVxdWVzdFJlY2VpdmVkU3RhcnRUaW1lIiwiU3ltYm9sIiwiZm9yIiwicGlub0h0dHBTdGFydFRpbWUiLCJnZXRTdGFydFRpbWUiLCJyZXEiLCJzdGFydFRpbWUiLCJEYXRlIiwiX3N0YXJ0VGltZSIsImFwYWNoZUNvbW1vbkxvZ0Zvcm1hdCIsIm9wdGlvbnMiLCJyZXMiLCJjdHgiLCJpcCIsIm1ldGhvZCIsInVybCIsImh0dHBWZXJzaW9uTWFqb3IiLCJodHRwVmVyc2lvbk1pbm9yIiwic3RhdHVzQ29kZSIsImdldEhlYWRlciIsImRldkZyaWVuZGx5TG9nRm9ybWF0Iiwic3RhdHVzQ29sb3IiLCJyZXNwb25zZVRpbWUiLCJyZXNwb25zZVRpbWVIZWFkZXIiLCJtaWxsaXNlY29uZHMiLCJyZXNwb25zZUNvbG9yIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFqQjs7QUFDQSxJQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQXZCOztBQUNBLElBQU1FLEVBQUUsR0FBR0YsT0FBTyxDQUFDLElBQUQsQ0FBbEIsQyxDQUVBOzs7QUFDQSxJQUFNRyx3QkFBd0IsR0FBR0MsTUFBTSxDQUFDQyxHQUFQLENBQVcsNEJBQVgsQ0FBakM7QUFDQSxJQUFNQyxpQkFBaUIsR0FBR0YsTUFBTSxDQUFDQyxHQUFQLENBQVcscUJBQVgsQ0FBMUI7O0FBRUEsU0FBU0UsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDekIsTUFBSUMsU0FBUyxHQUFHLElBQUlDLElBQUosRUFBaEI7QUFDQSxNQUFJRixHQUFHLENBQUNMLHdCQUFELENBQUgsWUFBeUNPLElBQTdDLEVBQ0VELFNBQVMsR0FBR0QsR0FBRyxDQUFDTCx3QkFBRCxDQUFmLENBREYsS0FFSyxJQUFJLE9BQU9LLEdBQUcsQ0FBQ0wsd0JBQUQsQ0FBVixLQUF5QyxRQUE3QyxFQUNITSxTQUFTLEdBQUcsSUFBSUMsSUFBSixDQUFTRixHQUFHLENBQUNMLHdCQUFELENBQVosQ0FBWixDQURHLEtBRUEsSUFBSUssR0FBRyxDQUFDRixpQkFBRCxDQUFQLEVBQTRCRyxTQUFTLEdBQUcsSUFBSUMsSUFBSixDQUFTRixHQUFHLENBQUNGLGlCQUFELENBQVosQ0FBWixDQUE1QixLQUNBLElBQUlFLEdBQUcsQ0FBQ0csVUFBSixZQUEwQkQsSUFBOUIsRUFBb0NELFNBQVMsR0FBR0QsR0FBRyxDQUFDRyxVQUFoQixDQUFwQyxLQUNBLElBQUksT0FBT0gsR0FBRyxDQUFDRyxVQUFYLEtBQTBCLFFBQTlCLEVBQ0hGLFNBQVMsR0FBRyxJQUFJQyxJQUFKLENBQVNGLEdBQUcsQ0FBQ0csVUFBYixDQUFaO0FBQ0YsU0FBT0YsU0FBUDtBQUNEOztBQUVELFNBQVNHLHFCQUFULENBQStCQyxPQUEvQixFQUF3QztBQUFBLE1BQzlCTCxHQUQ4QixHQUNaSyxPQURZLENBQzlCTCxHQUQ4QjtBQUFBLE1BQ3pCTSxHQUR5QixHQUNaRCxPQURZLENBQ3pCQyxHQUR5QjtBQUFBLE1BQ3BCQyxHQURvQixHQUNaRixPQURZLENBQ3BCRSxHQURvQjtBQUd0QyxNQUFNTixTQUFTLEdBQUdGLFlBQVksQ0FBQ0MsR0FBRCxDQUE5QjtBQUVBLG1CQUFVTyxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0MsRUFBUCxHQUFZUixHQUFHLENBQUNRLEVBQTdCLGdCQUFxQ2YsT0FBTyxDQUFDUSxTQUFELENBQTVDLGdCQUE0REQsR0FBRyxDQUFDUyxNQUFoRSxjQUNFVCxHQUFHLENBQUNVLEdBRE4sbUJBRVNWLEdBQUcsQ0FBQ1csZ0JBRmIsY0FFaUNYLEdBQUcsQ0FBQ1ksZ0JBRnJDLGdCQUdFTixHQUFHLENBQUNPLFVBSE4sY0FJSVAsR0FBRyxDQUFDUSxTQUFKLENBQWMsZ0JBQWQsS0FBbUMsR0FKdkM7QUFLRDs7QUFFRCxTQUFTQyxvQkFBVCxDQUE4QlYsT0FBOUIsRUFBdUM7QUFBQSxNQUM3QkwsR0FENkIsR0FDWEssT0FEVyxDQUM3QkwsR0FENkI7QUFBQSxNQUN4Qk0sR0FEd0IsR0FDWEQsT0FEVyxDQUN4QkMsR0FEd0I7QUFBQSxNQUNuQkMsR0FEbUIsR0FDWEYsT0FEVyxDQUNuQkUsR0FEbUI7QUFHckMsTUFBTVMsV0FBVyxHQUNmVixHQUFHLENBQUNPLFVBQUosSUFBa0IsR0FBbEIsR0FDSSxLQURKLEdBRUlQLEdBQUcsQ0FBQ08sVUFBSixJQUFrQixHQUFsQixHQUNBLFFBREEsR0FFQVAsR0FBRyxDQUFDTyxVQUFKLElBQWtCLEdBQWxCLEdBQ0EsTUFEQSxHQUVBUCxHQUFHLENBQUNPLFVBQUosSUFBa0IsR0FBbEIsR0FDQSxPQURBLEdBRUEsT0FUTjtBQVdBLE1BQUlJLFlBQVksR0FBRyxHQUFuQjtBQUVBLE1BQU1DLGtCQUFrQixHQUFHWixHQUFHLENBQUNRLFNBQUosQ0FBYyxpQkFBZCxDQUEzQjs7QUFDQSxNQUFJSSxrQkFBSixFQUF3QjtBQUN0QixRQUFNQyxZQUFZLEdBQUd6QixFQUFFLENBQUN3QixrQkFBRCxDQUF2QjtBQUNBLFFBQU1FLGFBQWEsR0FDakJELFlBQVksSUFBSSxJQUFoQixHQUNJLEtBREosR0FFSUEsWUFBWSxJQUFJLEdBQWhCLEdBQ0EsU0FEQSxHQUVBQSxZQUFZLElBQUksR0FBaEIsR0FDQSxRQURBLEdBRUFBLFlBQVksSUFBSSxHQUFoQixHQUNBLE1BREEsR0FFQSxPQVROO0FBVUFGLElBQUFBLFlBQVksR0FBRzFCLENBQUMsQ0FBQzZCLGFBQUQsQ0FBRCxXQUFvQkQsWUFBcEIsU0FBZjtBQUNEOztBQUVELFNBQU8sQ0FDTFosR0FBRyxHQUFHQSxHQUFHLENBQUNDLEVBQVAsR0FBWVIsR0FBRyxDQUFDUSxFQURkLEVBRUxSLEdBQUcsQ0FBQ1MsTUFGQyxFQUdMVCxHQUFHLENBQUNVLEdBSEMsaUJBSUdWLEdBQUcsQ0FBQ1csZ0JBSlAsY0FJMkJYLEdBQUcsQ0FBQ1ksZ0JBSi9CLEdBS0xyQixDQUFDLENBQUN5QixXQUFELENBQUQsQ0FBZVYsR0FBRyxDQUFDTyxVQUFuQixDQUxLLEVBTUxQLEdBQUcsQ0FBQ1EsU0FBSixDQUFjLGdCQUFkLEtBQW1DLEdBTjlCLEVBT0wsR0FQSyxFQVFMRyxZQVJLLEVBU0xJLElBVEssQ0FTQSxHQVRBLENBQVA7QUFVRCxDLENBRUQ7OztBQUNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBQWxCLE9BQU8sRUFBSTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxNQUFJbUIsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFDRSxPQUFPdEIscUJBQXFCLENBQUNDLE9BQUQsQ0FBNUIsQ0FMd0IsQ0FPMUI7QUFDQTs7QUFDQSxTQUFPVSxvQkFBb0IsQ0FBQ1YsT0FBRCxDQUEzQjtBQUNELENBVkQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjID0gcmVxdWlyZSgnYW5zaS1jb2xvcnMnKTtcbmNvbnN0IGNsZkRhdGUgPSByZXF1aXJlKCdjbGYtZGF0ZScpO1xuY29uc3QgbXMgPSByZXF1aXJlKCdtcycpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2FiaW5qcy9yZXF1ZXN0LXJlY2VpdmVkXG5jb25zdCByZXF1ZXN0UmVjZWl2ZWRTdGFydFRpbWUgPSBTeW1ib2wuZm9yKCdyZXF1ZXN0LXJlY2VpdmVkLnN0YXJ0VGltZScpO1xuY29uc3QgcGlub0h0dHBTdGFydFRpbWUgPSBTeW1ib2wuZm9yKCdwaW5vLWh0dHAuc3RhcnRUaW1lJyk7XG5cbmZ1bmN0aW9uIGdldFN0YXJ0VGltZShyZXEpIHtcbiAgbGV0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gIGlmIChyZXFbcmVxdWVzdFJlY2VpdmVkU3RhcnRUaW1lXSBpbnN0YW5jZW9mIERhdGUpXG4gICAgc3RhcnRUaW1lID0gcmVxW3JlcXVlc3RSZWNlaXZlZFN0YXJ0VGltZV07XG4gIGVsc2UgaWYgKHR5cGVvZiByZXFbcmVxdWVzdFJlY2VpdmVkU3RhcnRUaW1lXSA9PT0gJ251bWJlcicpXG4gICAgc3RhcnRUaW1lID0gbmV3IERhdGUocmVxW3JlcXVlc3RSZWNlaXZlZFN0YXJ0VGltZV0pO1xuICBlbHNlIGlmIChyZXFbcGlub0h0dHBTdGFydFRpbWVdKSBzdGFydFRpbWUgPSBuZXcgRGF0ZShyZXFbcGlub0h0dHBTdGFydFRpbWVdKTtcbiAgZWxzZSBpZiAocmVxLl9zdGFydFRpbWUgaW5zdGFuY2VvZiBEYXRlKSBzdGFydFRpbWUgPSByZXEuX3N0YXJ0VGltZTtcbiAgZWxzZSBpZiAodHlwZW9mIHJlcS5fc3RhcnRUaW1lID09PSAnbnVtYmVyJylcbiAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZShyZXEuX3N0YXJ0VGltZSk7XG4gIHJldHVybiBzdGFydFRpbWU7XG59XG5cbmZ1bmN0aW9uIGFwYWNoZUNvbW1vbkxvZ0Zvcm1hdChvcHRpb25zKSB7XG4gIGNvbnN0IHsgcmVxLCByZXMsIGN0eCB9ID0gb3B0aW9ucztcblxuICBjb25zdCBzdGFydFRpbWUgPSBnZXRTdGFydFRpbWUocmVxKTtcblxuICByZXR1cm4gYCR7Y3R4ID8gY3R4LmlwIDogcmVxLmlwfSAtICR7Y2xmRGF0ZShzdGFydFRpbWUpfSBcIiR7cmVxLm1ldGhvZH0gJHtcbiAgICByZXEudXJsXG4gIH0gSFRUUC8ke3JlcS5odHRwVmVyc2lvbk1ham9yfS4ke3JlcS5odHRwVmVyc2lvbk1pbm9yfVwiICR7XG4gICAgcmVzLnN0YXR1c0NvZGVcbiAgfSAke3Jlcy5nZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJykgfHwgJy0nfWA7XG59XG5cbmZ1bmN0aW9uIGRldkZyaWVuZGx5TG9nRm9ybWF0KG9wdGlvbnMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgY3R4IH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHN0YXR1c0NvbG9yID1cbiAgICByZXMuc3RhdHVzQ29kZSA+PSA1MDBcbiAgICAgID8gJ3JlZCdcbiAgICAgIDogcmVzLnN0YXR1c0NvZGUgPj0gNDAwXG4gICAgICA/ICd5ZWxsb3cnXG4gICAgICA6IHJlcy5zdGF0dXNDb2RlID49IDMwMFxuICAgICAgPyAnY3lhbidcbiAgICAgIDogcmVzLnN0YXR1c0NvZGUgPj0gMjAwXG4gICAgICA/ICdncmVlbidcbiAgICAgIDogJ3doaXRlJztcblxuICBsZXQgcmVzcG9uc2VUaW1lID0gJy0nO1xuXG4gIGNvbnN0IHJlc3BvbnNlVGltZUhlYWRlciA9IHJlcy5nZXRIZWFkZXIoJ3gtcmVzcG9uc2UtdGltZScpO1xuICBpZiAocmVzcG9uc2VUaW1lSGVhZGVyKSB7XG4gICAgY29uc3QgbWlsbGlzZWNvbmRzID0gbXMocmVzcG9uc2VUaW1lSGVhZGVyKTtcbiAgICBjb25zdCByZXNwb25zZUNvbG9yID1cbiAgICAgIG1pbGxpc2Vjb25kcyA+PSAxMDAwXG4gICAgICAgID8gJ3JlZCdcbiAgICAgICAgOiBtaWxsaXNlY29uZHMgPj0gNTAwXG4gICAgICAgID8gJ21hZ2VudGEnXG4gICAgICAgIDogbWlsbGlzZWNvbmRzID49IDI1MFxuICAgICAgICA/ICd5ZWxsb3cnXG4gICAgICAgIDogbWlsbGlzZWNvbmRzID49IDEwMFxuICAgICAgICA/ICdjeWFuJ1xuICAgICAgICA6ICdncmVlbic7XG4gICAgcmVzcG9uc2VUaW1lID0gY1tyZXNwb25zZUNvbG9yXShgJHttaWxsaXNlY29uZHN9IG1zYCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIGN0eCA/IGN0eC5pcCA6IHJlcS5pcCxcbiAgICByZXEubWV0aG9kLFxuICAgIHJlcS51cmwsXG4gICAgYEhUVFAvJHtyZXEuaHR0cFZlcnNpb25NYWpvcn0uJHtyZXEuaHR0cFZlcnNpb25NaW5vcn1gLFxuICAgIGNbc3RhdHVzQ29sb3JdKHJlcy5zdGF0dXNDb2RlKSxcbiAgICByZXMuZ2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcpIHx8ICctJyxcbiAgICAnLScsXG4gICAgcmVzcG9uc2VUaW1lXG4gIF0uam9pbignICcpO1xufVxuXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85MjM0Njk5L3VuZGVyc3RhbmRpbmctYXBhY2hlcy1hY2Nlc3MtbG9nXG5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbnMgPT4ge1xuICAvLyBBcGFjaGUgQ29tbW9uIExvZyBGb3JtYXRcbiAgLy8gPGh0dHBzOi8vaHR0cGQuYXBhY2hlLm9yZy9kb2NzL2N1cnJlbnQvbG9ncy5odG1sI2NvbW1vbj5cbiAgLy8gOnJlbW90ZS1hZGRyIC0gOnJlbW90ZS11c2VyIFs6ZGF0ZVtjbGZdXSBcIjptZXRob2QgOnVybCBIVFRQLzpodHRwLXZlcnNpb25cIiA6c3RhdHVzIDpyZXNbY29udGVudC1sZW5ndGhdXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKVxuICAgIHJldHVybiBhcGFjaGVDb21tb25Mb2dGb3JtYXQob3B0aW9ucyk7XG5cbiAgLy8gRGV2LUZyaWVuZGx5IExvZyBGb3JtYXRcbiAgLy8gOnJlbW90ZS1hZGRyIDpyZW1vdGUtdXNlciA6bWV0aG9kIDp1cmwgSFRUUC86aHR0cC12ZXJzaW9uIDpzdGF0dXMgOnJlc1tjb250ZW50LWxlbmd0aF0gLSA6cmVzcG9uc2UtdGltZSBtc1xuICByZXR1cm4gZGV2RnJpZW5kbHlMb2dGb3JtYXQob3B0aW9ucyk7XG59O1xuIl19